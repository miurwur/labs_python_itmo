{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1vs_nDh7C4oTnI26sLC49lbB-EO3Nc6cv","timestamp":1761757230288}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Лабораторная работа 7\n","\n"],"metadata":{"id":"mJSNfIGWABa4"}},{"cell_type":"markdown","source":["При локальной работе, вам необходимо установить requests\n","\n","```pip install requests```\n","\n","Виртуальное окружение:\n","\n","- изолировать текущие зависимости (модули, пакеты) от среды.\n","\n","\n","```shell\n","virtualenv env # Создание вирт. окружения\n","source env/bin/activate # linux\n","\n","env/Scripts/activate.bat #\n","```"],"metadata":{"id":"RjmPDnI_DISu"}},{"cell_type":"code","source":["  import sys\n","\n","  def trace(func=None, *, handle=sys.stdout):\n","      print(f\"decorated func: {func}, {handle}\")\n","      if func is None:\n","          print('func is None')\n","          return lambda func: trace(func, handle=handle)\n","      else:\n","          print(f'{func.__name__}, {handle}')\n","\n","      @functools.wraps(func)\n","      def inner(*args, **kwargs):\n","          handle.write(f\"Using handling output\\n\")\n","          # print(func.__name__, args, kwargs)\n","          return func(*args, **kwargs)\n","\n","      # print('return inner')\n","      return inner"],"metadata":{"id":"JyQkzA-rRXub"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import io\n","import functools\n","\n","\n","nonstandardstream = io.StringIO()\n","@trace(handle=nonstandardstream)\n","def increm(x):\n","    \"\"\"Инкремент\"\"\"\n","    # print(\"Инкремент\")\n","    return x+1\n","\n","increm(2)\n","\n","nonstandardstream.getvalue()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":107},"id":"X_iB9xgySN12","executionInfo":{"status":"ok","timestamp":1760709107975,"user_tz":-180,"elapsed":5,"user":{"displayName":"Nick Zhukov","userId":"16032239925490039311"}},"outputId":"62303a29-a39d-4a7e-b355-d15c368aebac"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["decorated func: None, <_io.StringIO object at 0x7f11210a7700>\n","func is None\n","decorated func: <function increm at 0x7f1121c26520>, <_io.StringIO object at 0x7f11210a7700>\n","increm, <_io.StringIO object at 0x7f11210a7700>\n"]},{"output_type":"execute_result","data":{"text/plain":["'Using handling output\\n'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":12}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":849},"id":"ca6f9812","executionInfo":{"status":"error","timestamp":1761400143971,"user_tz":-180,"elapsed":67,"user":{"displayName":"Nick Zhukov","userId":"16032239925490039311"}},"outputId":"4b207868-afc4-41a2-d752-f34eaf1591c6"},"source":["import functools\n","import requests\n","import sys\n","import io\n","\n","def get_currencies(currency_codes: list, url:str = \"https://www.cbr-xml-daily.ru/daily_json.js\", handle=sys.stdout)->dict:\n","    \"\"\"\n","    Получает курсы валют с API Центробанка России.\n","\n","    Args:\n","        currency_codes (list): Список символьных кодов валют (например, ['USD', 'EUR']).\n","\n","    Returns:\n","        dict: Словарь, где ключи - символьные коды валют, а значения - их курсы.\n","              Возвращает None в случае ошибки запроса.\n","    \"\"\"\n","    try:\n","\n","        response = requests.get(url)\n","\n","        # print(response.status_code)\n","        response.raise_for_status()  # Проверка на ошибки HTTP\n","        data = response.json()\n","        # print(data)\n","        currencies = {}\n","\n","        if \"Valute\" in data:\n","            for code in currency_codes:\n","                if code in data[\"Valute\"]:\n","                    currencies[code] = data[\"Valute\"][code][\"Value\"]\n","                else:\n","                    currencies[code] = f\"Код валюты '{code}' не найден.\"\n","        return currencies\n","\n","    except requests.exceptions.RequestException as e:\n","        # print(f\"Ошибка при запросе к API: {e}\", file=handle)\n","        handle.write(f\"Ошибка при запросе к API: {e}\")\n","        # raise ValueError('Упали с исключением')\n","        raise requests.exceptions.RequestException('Упали с исключением')\n","\n","# Пример использования функции:\n","currency_list = ['USD', 'EUR', 'GBP', 'NNZ']\n","\n","currency_data = get_currencies(currency_list, url='https://www.cbr-xml-daily.ru1/daily_json.js')\n","if currency_data:\n","     print(currency_data)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Ошибка при запросе к API: HTTPSConnectionPool(host='www.cbr-xml-daily.ru1', port=443): Max retries exceeded with url: /daily_json.js (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7dfd8a1e3c80>: Failed to resolve 'www.cbr-xml-daily.ru1' ([Errno -2] Name or service not known)\"))"]},{"output_type":"error","ename":"RequestException","evalue":"Упали с исключением","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mgaierror\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.12/dist-packages/urllib3/connection.py\u001b[0m in \u001b[0;36m_new_conn\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    197\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 198\u001b[0;31m             sock = connection.create_connection(\n\u001b[0m\u001b[1;32m    199\u001b[0m                 \u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dns_host\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mport\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.12/dist-packages/urllib3/util/connection.py\u001b[0m in \u001b[0;36mcreate_connection\u001b[0;34m(address, timeout, source_address, socket_options)\u001b[0m\n\u001b[1;32m     59\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 60\u001b[0;31m     \u001b[0;32mfor\u001b[0m \u001b[0mres\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msocket\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetaddrinfo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhost\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mport\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfamily\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msocket\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSOCK_STREAM\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     61\u001b[0m         \u001b[0maf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msocktype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mproto\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcanonname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msa\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mres\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.12/socket.py\u001b[0m in \u001b[0;36mgetaddrinfo\u001b[0;34m(host, port, family, type, proto, flags)\u001b[0m\n\u001b[1;32m    977\u001b[0m     \u001b[0maddrlist\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 978\u001b[0;31m     \u001b[0;32mfor\u001b[0m \u001b[0mres\u001b[0m \u001b[0;32min\u001b[0m \u001b[0m_socket\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetaddrinfo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhost\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mport\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfamily\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mproto\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mflags\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    979\u001b[0m         \u001b[0maf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msocktype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mproto\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcanonname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msa\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mres\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mgaierror\u001b[0m: [Errno -2] Name or service not known","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mNameResolutionError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.12/dist-packages/urllib3/connectionpool.py\u001b[0m in \u001b[0;36murlopen\u001b[0;34m(self, method, url, body, headers, retries, redirect, assert_same_host, timeout, pool_timeout, release_conn, chunked, body_pos, preload_content, decode_content, **response_kw)\u001b[0m\n\u001b[1;32m    786\u001b[0m             \u001b[0;31m# Make the request on the HTTPConnection object\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 787\u001b[0;31m             response = self._make_request(\n\u001b[0m\u001b[1;32m    788\u001b[0m                 \u001b[0mconn\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.12/dist-packages/urllib3/connectionpool.py\u001b[0m in \u001b[0;36m_make_request\u001b[0;34m(self, conn, method, url, body, headers, retries, timeout, chunked, response_conn, preload_content, decode_content, enforce_content_length)\u001b[0m\n\u001b[1;32m    487\u001b[0m                 \u001b[0mnew_e\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_wrap_proxy_error\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_e\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mproxy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscheme\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 488\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mnew_e\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    489\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.12/dist-packages/urllib3/connectionpool.py\u001b[0m in \u001b[0;36m_make_request\u001b[0;34m(self, conn, method, url, body, headers, retries, timeout, chunked, response_conn, preload_content, decode_content, enforce_content_length)\u001b[0m\n\u001b[1;32m    463\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 464\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_conn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mconn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    465\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mSocketTimeout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mBaseSSLError\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.12/dist-packages/urllib3/connectionpool.py\u001b[0m in \u001b[0;36m_validate_conn\u001b[0;34m(self, conn)\u001b[0m\n\u001b[1;32m   1092\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mconn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_closed\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1093\u001b[0;31m             \u001b[0mconn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconnect\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1094\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.12/dist-packages/urllib3/connection.py\u001b[0m in \u001b[0;36mconnect\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    752\u001b[0m             \u001b[0msock\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0msocket\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msocket\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0mssl\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSSLSocket\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 753\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msock\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msock\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_new_conn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    754\u001b[0m             \u001b[0mserver_hostname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhost\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.12/dist-packages/urllib3/connection.py\u001b[0m in \u001b[0;36m_new_conn\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    204\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0msocket\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgaierror\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 205\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mNameResolutionError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhost\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    206\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mSocketTimeout\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameResolutionError\u001b[0m: <urllib3.connection.HTTPSConnection object at 0x7dfd8a1e3c80>: Failed to resolve 'www.cbr-xml-daily.ru1' ([Errno -2] Name or service not known)","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mMaxRetryError\u001b[0m                             Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.12/dist-packages/requests/adapters.py\u001b[0m in \u001b[0;36msend\u001b[0;34m(self, request, stream, timeout, verify, cert, proxies)\u001b[0m\n\u001b[1;32m    666\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 667\u001b[0;31m             resp = conn.urlopen(\n\u001b[0m\u001b[1;32m    668\u001b[0m                 \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrequest\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.12/dist-packages/urllib3/connectionpool.py\u001b[0m in \u001b[0;36murlopen\u001b[0;34m(self, method, url, body, headers, retries, redirect, assert_same_host, timeout, pool_timeout, release_conn, chunked, body_pos, preload_content, decode_content, **response_kw)\u001b[0m\n\u001b[1;32m    840\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 841\u001b[0;31m             retries = retries.increment(\n\u001b[0m\u001b[1;32m    842\u001b[0m                 \u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merror\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnew_e\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_pool\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_stacktrace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexc_info\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.12/dist-packages/urllib3/util/retry.py\u001b[0m in \u001b[0;36mincrement\u001b[0;34m(self, method, url, response, error, _pool, _stacktrace)\u001b[0m\n\u001b[1;32m    518\u001b[0m             \u001b[0mreason\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0merror\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mResponseError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcause\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 519\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mMaxRetryError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_pool\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreason\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mreason\u001b[0m  \u001b[0;31m# type: ignore[arg-type]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    520\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mMaxRetryError\u001b[0m: HTTPSConnectionPool(host='www.cbr-xml-daily.ru1', port=443): Max retries exceeded with url: /daily_json.js (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7dfd8a1e3c80>: Failed to resolve 'www.cbr-xml-daily.ru1' ([Errno -2] Name or service not known)\"))","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mConnectionError\u001b[0m                           Traceback (most recent call last)","\u001b[0;32m/tmp/ipython-input-804828679.py\u001b[0m in \u001b[0;36mget_currencies\u001b[0;34m(currency_codes, url, handle)\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 19\u001b[0;31m         \u001b[0mresponse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrequests\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     20\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.12/dist-packages/requests/api.py\u001b[0m in \u001b[0;36mget\u001b[0;34m(url, params, **kwargs)\u001b[0m\n\u001b[1;32m     72\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 73\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mrequest\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"get\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparams\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     74\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.12/dist-packages/requests/api.py\u001b[0m in \u001b[0;36mrequest\u001b[0;34m(method, url, **kwargs)\u001b[0m\n\u001b[1;32m     58\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0msessions\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSession\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0msession\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 59\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0msession\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrequest\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0murl\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     60\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.12/dist-packages/requests/sessions.py\u001b[0m in \u001b[0;36mrequest\u001b[0;34m(self, method, url, params, data, headers, cookies, files, auth, timeout, allow_redirects, proxies, hooks, stream, verify, cert, json)\u001b[0m\n\u001b[1;32m    588\u001b[0m         \u001b[0msend_kwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msettings\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 589\u001b[0;31m         \u001b[0mresp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprep\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0msend_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    590\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.12/dist-packages/requests/sessions.py\u001b[0m in \u001b[0;36msend\u001b[0;34m(self, request, **kwargs)\u001b[0m\n\u001b[1;32m    702\u001b[0m         \u001b[0;31m# Send the request\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 703\u001b[0;31m         \u001b[0mr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0madapter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrequest\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    704\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.12/dist-packages/requests/adapters.py\u001b[0m in \u001b[0;36msend\u001b[0;34m(self, request, stream, timeout, verify, cert, proxies)\u001b[0m\n\u001b[1;32m    699\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 700\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mConnectionError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrequest\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrequest\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    701\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mConnectionError\u001b[0m: HTTPSConnectionPool(host='www.cbr-xml-daily.ru1', port=443): Max retries exceeded with url: /daily_json.js (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7dfd8a1e3c80>: Failed to resolve 'www.cbr-xml-daily.ru1' ([Errno -2] Name or service not known)\"))","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mRequestException\u001b[0m                          Traceback (most recent call last)","\u001b[0;32m/tmp/ipython-input-804828679.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     42\u001b[0m \u001b[0mcurrency_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'USD'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'EUR'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'GBP'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'NNZ'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     43\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 44\u001b[0;31m \u001b[0mcurrency_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_currencies\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcurrency_list\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0murl\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'https://www.cbr-xml-daily.ru1/daily_json.js'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     45\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mcurrency_data\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     46\u001b[0m      \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcurrency_data\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/tmp/ipython-input-804828679.py\u001b[0m in \u001b[0;36mget_currencies\u001b[0;34m(currency_codes, url, handle)\u001b[0m\n\u001b[1;32m     37\u001b[0m         \u001b[0mhandle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwrite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Ошибка при запросе к API: {e}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     38\u001b[0m         \u001b[0;31m# raise ValueError('Упали с исключением')\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 39\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mrequests\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexceptions\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mRequestException\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Упали с исключением'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     40\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     41\u001b[0m \u001b[0;31m# Пример использования функции:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mRequestException\u001b[0m: Упали с исключением"]}]},{"cell_type":"code","source":["import unittest\n","from requests import exceptions\n","\n","MAX_R_VALUE = 1000\n","\n","\n","# Тесты\n","class TestGetCurrencies(unittest.TestCase):\n","\n","  def test_currency_usd(self):\n","    \"\"\"\n","      Проверяет наличие ключа в словаре и значения этого ключа\n","    \"\"\"\n","    currency_list = ['USD']\n","    currency_data = get_currencies(currency_list)\n","\n","    self.assertIn(currency_list[0], currency_data)\n","    self.assertIsInstance(currency_data['USD'], float)\n","    self.assertGreaterEqual(currency_data['USD'], 0)\n","    self.assertLessEqual(currency_data['USD'], MAX_R_VALUE)\n","\n","  def test_nonexist_code(self):\n","    self.assertIn(\"Код валюты\", get_currencies(['XYZ'])['XYZ'])\n","    self.assertIn(\"XYZ\", get_currencies(['XYZ'])['XYZ'])\n","    self.assertIn(\"не найден\", get_currencies(['XYZ'])['XYZ'])\n","\n","  def test_get_currency_error(self):\n","    error_phrase_regex = \"Ошибка при запросе к API\"\n","    currency_list = ['USD']\n","\n","    with self.assertRaises(requests.exceptions.RequestException):\n","      currency_data = get_currencies(currency_list, url=\"https://\")\n","\n","\n","\n","\n","  #   # Найти каким образом проверить содержание фразы error_phase_regex в\n","  #   # потоке вывода\n","\n","  #   # Дополнить тест, который должен проверять что в потоке, куда пишет функция\n","  #   # get_currencies содержится error_phrase_regex /\n","  #   # для использования assertStartsWith или assertRegex\n","\n","\n","\n","\n","\n","# Запуск тестов\n","unittest.main(argv=[''], verbosity=2, exit=False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xClnQNyxGIcu","executionInfo":{"status":"ok","timestamp":1761393267244,"user_tz":-180,"elapsed":605,"user":{"displayName":"Nick Zhukov","userId":"16032239925490039311"}},"outputId":"07cd9a0b-5e8e-444c-d005-2997d92e000b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["test_currency_usd (__main__.TestGetCurrencies.test_currency_usd)\n","Проверяет наличие ключа в словаре и значения этого ключа ... ok\n","test_get_currency_error (__main__.TestGetCurrencies.test_get_currency_error) ... ok\n","test_nonexist_code (__main__.TestGetCurrencies.test_nonexist_code) ... ok\n","\n","----------------------------------------------------------------------\n","Ran 3 tests in 0.439s\n","\n","OK\n"]},{"output_type":"stream","name":"stdout","text":["Ошибка при запросе к API: Invalid URL 'https://': No host supplied"]},{"output_type":"execute_result","data":{"text/plain":["<unittest.main.TestProgram at 0x7e363f71ca40>"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["import sys\n","\n","def trace(func=None, *, handle=sys.stdout):\n","    # print(f\"decorated func: {func}, {handle}\")\n","    if func is None:\n","        # print('func is None')\n","        return lambda func: trace(func, handle=handle)\n","    # else:\n","    #   print(f'{func.__name__}, {handle}')\n","\n","    @functools.wraps(func)\n","    def inner(*args, **kwargs):\n","        handle.write(f\"Using handling output\\n\")\n","        # print(func.__name__, args, kwargs)\n","        return func(*args, **kwargs)\n","\n","    # print('return inner')\n","    return inner"],"metadata":{"id":"udDKf_HyYe5Q"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import io\n","f = io.StringIO()\n","\n","f.write(\"Hello from teacher!\\n\")\n","f.write('This is second line')\n","\n","# f.seek(0)\n","# print(f.read())\n","\n","# f.seek(0)\n","# print(f.read())\n","\n","f.getvalue()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"VubX4lEGg3AD","executionInfo":{"status":"ok","timestamp":1761398656944,"user_tz":-180,"elapsed":49,"user":{"displayName":"Nick Zhukov","userId":"16032239925490039311"}},"outputId":"8c939919-87ce-4971-ef63-117b09eaf24d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'Hello from teacher!\\nThis is second line'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["import unittest\n","import io\n","\n","\n","# Тесты\n","class TestStreamWrite(unittest.TestCase):\n","\n","\n","  def setUp(self):\n","    self.nonstandardstream = io.StringIO()\n","\n","\n","    try:\n","      self.get_currencies = get_currencies(['USD'],\n","                                         url=\"https://\",\n","                                         handle=self.nonstandardstream)\n","    except:\n","      pass\n","    # self.trace = trace(get_currencies, handle=self.nonstandardstream)\n","\n","\n","  def test_writing_stream(self):\n","    pass\n","    #with self.assertRaises(requests.exceptions.RequestException):\n","     # self.trace(['USD'], url=\"https://\")\n","\n","\n","  def tearDown(self):\n","    del self.nonstandardstream\n","\n","\n","\n","\n","# Запуск тестов\n","unittest.main(argv=[''], verbosity=2, exit=False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"R20TPjIPYkfJ","executionInfo":{"status":"ok","timestamp":1760794893597,"user_tz":-180,"elapsed":52,"user":{"displayName":"Nick Zhukov","userId":"16032239925490039311"}},"outputId":"ce38d6ab-89c6-4c0c-f9ba-429af1155133"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["test_writing_stream (__main__.TestStreamWrite.test_writing_stream) ... ok\n","\n","----------------------------------------------------------------------\n","Ran 1 test in 0.004s\n","\n","OK\n"]},{"output_type":"execute_result","data":{"text/plain":["<unittest.main.TestProgram at 0x7e3894f679b0>"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["currency_data = get_currencies(currency_list, url=\"sdfhsjdsdfsdfm\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":144},"id":"fw3LkFyuj0cV","executionInfo":{"status":"error","timestamp":1761400027178,"user_tz":-180,"elapsed":49,"user":{"displayName":"Nick Zhukov","userId":"16032239925490039311"}},"outputId":"99ae8a9a-5611-4b64-80a9-5c57cb4534da"},"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'get_currencies' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/tmp/ipython-input-3088738389.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mcurrency_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_currencies\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcurrency_list\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0murl\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"sdfhsjdsdfsdfm\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'get_currencies' is not defined"]}]},{"cell_type":"code","source":["import unittest\n","import io\n","\n","\n","\n","def super_sum(a, b, file='my_file.txt'):\n","  f = open(file, mode='w', encoding='utf-8')\n","  res = a + b\n","  f.write(f'super_sum, {a}, {b}, result: {res}')\n","  f.close()\n","\n","  return res\n","\n","\n","\n","super_sum(100, 200 )\n","# Тесты\n","class TestStreamWrite(unittest.TestCase):\n","\n","  def setUp(self):\n","    self.file_for_tests = 'file_for_tests.txt'\n","\n","  def test_writing_stream(self):\n","\n","    args = (100, 200)\n","    exp_result_tmpl = 'название_функции, 100, 200, result: 300'\n","\n","    exp_result_func = super_sum(*args, file=self.file_for_tests)\n","\n","    exp_result = f\"{super_sum.__name__}, \" + ', '.join(map (lambda x: str(x),list(args))) + f\", result: {exp_result_func}\"\n","\n","    self.f_t = open(self.file_for_tests)\n","    self.exp_result = self.f_t.read().strip()\n","    self.assertEqual(exp_result, self.exp_result)\n","\n","  def tearDown(self):\n","    self.f_t.close()\n","    del self.file_for_tests\n","\n","\n","\n","\n","# Запуск тестов\n","unittest.main(argv=[''], verbosity=2, exit=False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SSM42PhQot38","executionInfo":{"status":"ok","timestamp":1761398411551,"user_tz":-180,"elapsed":17,"user":{"displayName":"Nick Zhukov","userId":"16032239925490039311"}},"outputId":"93a603c8-195e-44a3-8397-d2b3710463b8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["test_writing_stream (__main__.TestStreamWrite.test_writing_stream) ... ok\n","\n","----------------------------------------------------------------------\n","Ran 1 test in 0.003s\n","\n","OK\n"]},{"output_type":"execute_result","data":{"text/plain":["<unittest.main.TestProgram at 0x7dfda9d0ad80>"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["def super_sum(a, b, file='my_file.txt'):\n","  f = open(file, mode='w', encoding='utf-8')\n","  res = a + b\n","  f.write(f'super_sum, {a}, {b}, result: {res}')\n","  f.close()\n","\n","  return res\n","\n","\n","\n","# print(super_sum('1', '2'))\n","\n","\n","try:\n","  super_sum('1' , 2)\n","except (ValueError, TypeError) as e:\n","  print(str(e))\n","  f = open('errors.log', mode='w')\n","  f.write(str(e))\n","  f.close()\n","\n","\n","# print(\"контекст ошибки: \", e)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AU7reJyblQ6o","executionInfo":{"status":"ok","timestamp":1761399696417,"user_tz":-180,"elapsed":11,"user":{"displayName":"Nick Zhukov","userId":"16032239925490039311"}},"outputId":"e17bfd55-bb5b-4d80-a59f-36e469025eef"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["can only concatenate str (not \"int\") to str\n"]}]}]}